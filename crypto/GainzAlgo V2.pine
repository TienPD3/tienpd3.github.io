//@version=5 
strategy(title='GainzAlgo V2', overlay=true, initial_capital=100, default_qty_type=strategy.cash, default_qty_value=100, max_labels_count=500, calc_on_every_tick=true) 
 
//---------- Inputs ---------- 
 
start = input.time(timestamp('2021-01-01'), 'Start', group='Period') 
metric_table = input.bool(false, 'Metric table', group='Miscellaneous') 
 
buyt = 0 
sellt = 0 
tp = 3.0 
sl = 7.0 
atr_mode = true 
atr_len = 2 
atr_mul = 0.5 
max_tp = 1.6 
max_sl = 10.0 
oct_mode = true 
 
//---------- Calculations ----------  
 
delta = close / (open / 100) - 100 
 
atr = ta.atr(atr_len) * atr_mul 
enough_data_for_atr = bar_index > atr_len 
 
not_in_trade = strategy.position_size == 0 
 
long = -buyt > delta and not_in_trade and (atr_mode ? enough_data_for_atr : true) 
short = sellt < delta and not_in_trade and (atr_mode ? enough_data_for_atr : true) 
 
//---------- Strategy ----------  
 
var bars_in = 0 
 
if oct_mode and barstate.isconfirmed 
    bars_in += 1 
 
    if bars_in == 1 
        strategy.close_all(comment='OCT') 
        bars_in := 0 
 
if long and barstate.isconfirmed and time > start 
    trd_tp = close * (1 + (tp / 100)) 
    trd_sl = close * (1 - (sl / 100)) 
     
    atr_tp = close + atr 
    atr_sl = close - atr 
     
    max_tp_ = close * (1 + (max_tp / 100)) 
    max_sl_ = close * (1 - (max_sl / 100)) 
     
    tp_ = atr_mode ? (atr_tp > max_tp_ ? max_tp_ : atr_tp) : trd_tp 
    sl_ = atr_mode ? (atr_sl < max_sl_ ? max_sl_ : atr_sl) : trd_sl 
     
    strategy.entry('Long', strategy.long, comment='SL: ' + str.tostring(sl_) + ' TP: ' + str.tostring(tp_)) 
    strategy.exit('Long', stop=sl_, limit=tp_, comment_profit='TP', comment_loss='SL') 
     
else if short and barstate.isconfirmed and time > start 
    trd_tp = close * (1 - (tp / 100)) 
    trd_sl = close * (1 + (sl / 100)) 
     
    atr_tp = close - atr 
    atr_sl = close + atr 
     
    max_tp_ = close * (1 - (max_tp / 100)) 
    max_sl_ = close * (1 + (max_sl / 100)) 
     
    tp_ = atr_mode ? (atr_tp < max_tp_ ? max_tp_ : atr_tp) : trd_tp 
    sl_ = atr_mode ? (atr_sl > max_sl_ ? max_sl_ : atr_sl) : trd_sl 
     
    strategy.entry('Short', strategy.short, comment='SL: ' + str.tostring(sl_) + ' TP: ' + str.tostring(tp_)) 
    strategy.exit('Short', stop=sl_, limit=tp_, comment_profit='TP', comment_loss='SL') 
 
//---------- Visuals ----------  
 
col = long ? #39ff14 : short ? #F72119 : #FFFFFF 
 
plot(barstate.islast ? close : na, '', col, 8, plot.style_circles, offset=1, display=display.pane) 
 
//---------- Metric Table ----------     
 
round_up(number, decimals) => 
    factor = math.pow(10, decimals) 
    math.ceil(number * factor) / factor 
 
var trades_arr = array.new_float(0) 
var win_arr = array.new_float(0) 
var loss_arr = array.new_float(0) 
var winrate_arr = array.new_float(0) 
var profit_arr = array.new_float(0) 
 
var last_trade_count = 0 
var last_win_count = 0 
var last_loss_count = 0 
var last_year = year 
 
var float last_equity = strategy.initial_capital 
var row_count = 0 
 
if metric_table 
    var table = table.new(position=position.top_right, columns=7, rows=100, bgcolor=color.black, border_color=color.black, border_width=1) 
 
    table.cell(table_id=table, column=0, row=0, text='YEAR', bgcolor=color.teal) 
    table.cell(table_id=table, column=1, row=0, text='TRADES', bgcolor=color.teal) 
    table.cell(table_id=table, column=2, row=0, text='WON', bgcolor=color.teal) 
    table.cell(table_id=table, column=3, row=0, text='LOST', bgcolor=color.teal) 
    table.cell(table_id=table, column=4, row=0, text='WIN RATE', bgcolor=color.teal) 
    table.cell(table_id=table, column=5, row=0, text='PROFIT', bgcolor=color.teal) 
    table.cell(table_id=table, column=6, row=0, text='B&amp;H', bgcolor=color.teal) 
 
    current_trade_count = strategy.wintrades + strategy.losstrades 
    current_win_count = strategy.wintrades 
    current_loss_count = strategy.losstrades 
 
    if year != last_year or barstate.islastconfirmedhistory 
        row_count := row_count + 1 
     
        trades_in_period = current_trade_count - last_trade_count 
        wins_in_period = current_win_count - last_win_count 
        losses_in_period = current_loss_count - last_loss_count 
        equity_in_period = strategy.equity - strategy.openprofit 
        profit_prnct = round_up(equity_in_period / last_equity * 100 - 100, 2) 
     
        bg_color = equity_in_period >= 100 and equity_in_period >= last_equity ? color.green : color.red 
        date = str.tostring(last_year) 
        win_rate_in_period = round_up(wins_in_period / (wins_in_period + losses_in_period) * 100, 2) 
     
        table.cell(table_id=table, column=0, row=row_count + 1, text=str.tostring(date), bgcolor=bg_color) 
        table.cell(table_id=table, column=1, row=row_count + 1, text=str.tostring(trades_in_period), bgcolor=bg_color) 
        table.cell(table_id=table, column=2, row=row_count + 1, text=str.tostring(wins_in_period), bgcolor=bg_color) 
        table.cell(table_id=table, column=3, row=row_count + 1, text=str.tostring(losses_in_period), bgcolor=bg_color) 
        table.cell(table_id=table, column=4, row=row_count + 1, text=str.tostring(win_rate_in_period) + ' %', bgcolor=bg_color) 
        table.cell(table_id=table, column=5, row=row_count + 1, text=str.tostring(profit_prnct) + ' %', bgcolor=bg_color) 
 
        bh = round_up(close / ((close > 0 ? close : close) / 100) - 100, 2) 
 
        bh_col = bh > 0 ? color.green : color.red 
 
        table.cell(table_id=table, column=6, row=row_count + 1, text=str.tostring(bh) + ' %', bgcolor=bh_col) 
         
        array.push(trades_arr, trades_in_period) 
        array.push(win_arr, wins_in_period) 
        array.push(loss_arr, losses_in_period) 
        array.push(winrate_arr, win_rate_in_period) 
     
        last_trade_count := current_trade_count 
        last_win_count := current_win_count 
        last_loss_count := current_loss_count 
        last_equity := equity_in_period 
        last_year := year 
         
    if barstate.islast 
        trades_avg = round_up(array.sum(trades_arr) / array.size(trades_arr), 2) 
        win_avg = round_up(array.sum(win_arr) / array.size(win_arr), 2) 
        loss_avg = round_up(array.sum(loss_arr) / array.size(loss_arr), 2) 
        winrate_avg = round_up(array.sum(winrate_arr) / array.size(winrate_arr), 2) 
     
        table.cell(table_id=table, column=0, row=row_count + 2, text='AVERAGE', bgcolor=color.yellow) 
        table.cell(table_id=table, column=1, row=row_count + 2, text=str.tostring(trades_avg), bgcolor=color.yellow) 
        table.cell(table_id=table, column=2, row=row_count + 2, text=str.tostring(win_avg), bgcolor=color.yellow) 
        table.cell(table_id=table, column=3, row=row_count + 2, text=str.tostring(loss_avg), bgcolor=color.yellow) 
        table.cell(table_id=table, column=4, row=row_count + 2, text=str.tostring(winrate_avg) + ' %', bgcolor=color.yellow)